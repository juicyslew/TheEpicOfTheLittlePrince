<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grapple</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>char_inst = instance_nearest(x,y,obj_char)
spd = 110
acc = -4
destroy_dist = 100
damp = .95
t = 0
grap_invul = 10
collided = false
inst = false
reelin = false
reelin_timer = 0
reelin_time = 40
justgrapped = false

//**physics**//

/*offset_y = 0;
host = self
nextRope = instance_create(x,y+offset_y, obj_grapline)

attach = physics_joint_distance_create(host, nextRope, host.x, host.y, nextRope.x, nextRope.y, false)
physics_joint_set_value(attach, phy_joint_damping_ratio, 1) // Controls the springiness
physics_joint_set_value(attach, phy_joint_frequency, 10) // Controls the frequency of rope updates


with(nextRope){
    parent = other.id
}

repeat(30){
    offset_y += 2
    lastRope = nextRope
    nextRope = instance_create(x,y+offset_y, obj_grapline)
    link = physics_joint_distance_create(lastRope, nextRope, lastRope.x, lastRope.y, nextRope.x, nextRope.y, false)
    physics_joint_set_value(link, phy_joint_damping_ratio, 1) // Controls the springiness
    physics_joint_set_value(link, phy_joint_frequency, 10) // Controls the frequency of rope updates

    with(nextRope){
        parent = other.lastRope
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>imdir = arctan2(char_inst.y-y, x-char_inst.x)
image_angle = imdir*180/pi-90
if reelin_timer &gt; reelin_time{
    reelin = true
}

if global.grapped{
    if justgrapped = true{
        justgrapped = false
        inst = instance_nearest(x+hspd, y+vspd, obj_block)
        if inst.object_index != obj_start_block{
            if inst.image_index+1 &lt; inst.image_number{
                inst.image_index += 1
            }else{
                if inst.planet_index &gt; -1 {
                    tempplan = global.all_planets[|inst.planet_index]
                    ind = ds_list_find_index(tempplan, inst)
                    obj_num = ds_list_size(tempplan) - global.infoend
                    tempplan[|0] -= inst.mass
                    tempplan[|1] = (obj_num*tempplan[|1]-inst.x)/(obj_num-1)
                    tempplan[|2] = (obj_num*tempplan[|1]-inst.x)/(obj_num-1)
                    ds_list_delete(tempplan, ind)
                    global.grapped = false
                    global.grap = false
                    reelin = true
                }
                with(inst){
                    instance_destroy()
                }
            }
        }
    }
    hspd = 0
    vspd = 0
    if instance_exists(inst){
        xdiff = x - inst.x
        ydiff = y - inst.y
        //r = sqrt(sqr(xdiff)+sqr(ydiff))
        blockdir = arctan2(xdiff,ydiff)
        dang = inst.angvel*pi/180
        //newang = blockdir+dang
        x = inst.x+(xdiff*cos(dang)+ydiff*sin(dang))+inst.hspd
        y = inst.y+(xdiff*-sin(dang)+ydiff*cos(dang))+inst.vspd
    }else{
        hspd = 0
        vspd = 0
    }
}else{
    justgrapped = true
    inst = false
    collided = false
    dist = sqrt(power(x-char_inst.x, 2) + power(y-char_inst.y,2))
    hacc = acc*cos(imdir)
    vacc = acc*-sin(imdir)
    hspd += hacc
    vspd += vacc
    spd += acc //this is just for determining when it starts to pass through objects
    if dist &lt; destroy_dist and t &gt; grap_invul{
        instance_destroy()
    }
    //general collisions
    if (place_meeting(x+hspd,y+vspd, obj_block))
    {
        inst = instance_place(x+hspd, y+vspd, obj_block)
        i=0
        totspd = sqrt(sqr(hspd)+sqr(vspd))
        while(!place_meeting(x-sign(hspd),y-sign(vspd),obj_block) and i &lt; abs(totspd)) //and !place_meeting(x,y+sign(vspd),obj_block) and i &lt; abs(vspd)) //this collision detection should allow interesting glitch in which you float through a long 1 by n passage of blocks while fitting perfectly on it
        {
            y += vspd/totspd
            x += hspd/totspd
            i += 1
        }
        //vspd = 0
        collided = true
    }
    //halfspeed collisions come up with better way
    if (place_meeting(x+hspd/2,y+vspd/2, obj_block))
    {
        inst = instance_place(x+hspd/2, y+vspd/2, obj_block)
        i=0
        totspd = sqrt(sqr(hspd/2)+sqr(vspd/2))
        while(!place_meeting(x-sign(hspd/2),y-sign(vspd/2),obj_block) and i &lt; abs(totspd)) //and !place_meeting(x,y+sign(vspd),obj_block) and i &lt; abs(vspd)) //this collision detection should allow interesting glitch in which you float through a long 1 by n passage of blocks while fitting perfectly on it
        {
            y += vspd/totspd/2
            x += hspd/totspd/2
            i += 1
        }
        //vspd = 0
        collided = true
    }
    
    //horizontal collisions
    /*if (place_meeting(x+hspd,y, obj_block))
    {
        inst = instance_place(x+hspd, y, obj_block)
        i=0
        while(!place_meeting(x-sign(hspd),y,obj_block) and i &lt; abs(hspd)) //and !place_meeting(x,y+sign(vspd),obj_block) and i &lt; abs(vspd)) //this collision detection should allow interesting glitch in which you float through a long 1 by n passage of blocks while fitting perfectly on it
        {
            x += sign(hspd)
            i += 1
        }
        //hspd = 0
        collided = true
    }*/
    if collided{
        if not reelin{
            hspd = 0
            vspd = 0
            spd = 0
        }
        if global.grap{
            global.grapped = true
        }
    }
    hspd*=damp
    vspd*=damp
    
}
x += hspd
y += vspd
t+=1
reelin_timer++;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
