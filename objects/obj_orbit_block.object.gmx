<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_asteroid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_block</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
hspd = 0
vspd = 0
orbit_dir = random_range(-1,1)
if orbit_dir &gt; 0{
    orbit_dir = 1
}else{
    orbit_dir = -1
}

planetpiece = false
subplanetpiece = false
angvel = random_range(-2, 2)
image_angle = random_range(0, 360)
termvel = 100

//GENERATE START ORBIT
planet = global.all_planets[|0]
pmass = planet[|0]
xcent = planet[|1]
ycent = planet[|2]
pdistsqr = sqr(xcent-x)+sqr(ycent-y)
distdir = arctan2(ycent-y, x-xcent)
gforce = global.gconst*mass*pmass/pdistsqr
hacc = gforce*-cos(distdir)
vacc = gforce*sin(distdir)

totacc = sqrt(sqr(vacc)+sqr(hacc))
pdist = sqrt(pdistsqr)
velmag = sqrt(totacc*pdist)*random_range(.75,1.33)
hspd = -sin(distdir)*orbit_dir*velmag
vspd = -cos(distdir)*orbit_dir*velmag
nocollide = false
nocollide_timer = 0
nocollide_time = 15
planet_index = -1
old_planet_index = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if nocollide_timer &gt; nocollide_time{
    nocollide_timer = 0
    nocollide = false
}
if subplanetpiece{
    myplanet = global.all_planets[|planet_index]
    hspd = myplanet[|3]//each step set to zero to determine new vel
    vspd = myplanet[|4]
}
if not planetpiece{
    xforceadd = 0
    yforceadd = 0
    for (i=0; i &lt; ds_list_size(global.all_planets); i++){
        if subplanetpiece and planet_index = i{
            continue
        }
        planet = global.all_planets[|i]
        pmass = planet[|0]
        xcent = planet[|1]
        ycent = planet[|2]
        pdistsqr = sqr(xcent-x)+sqr(ycent-y)
        distdir = arctan2(ycent-y, x-xcent)
        gforce = global.gconst*mass*pmass/pdistsqr
        xforceadd += gforce*-cos(distdir)
        yforceadd += gforce*sin(distdir)
    }
    hacc = xforceadd
    vacc = yforceadd
    hspd += hacc
    vspd += vacc
    vel = sqrt(sqr(hspd)+sqr(vspd))
    if vel &gt; termvel{
        hspd = hspd*termvel/vel
        vspd = vspd*termvel/vel
    }
    image_angle += angvel
    blockinst = instance_place(x,y,obj_block)
    playinst = instance_place(x,y,obj_char)
    // dnt need to run following code for playinst, optimize this later by
    // splitting into two parts.
    if (instance_exists(blockinst) or instance_exists(playinst)) and not nocollide{
        planet = -1
        finind = -1
        for (i=0; i &lt; ds_list_size(global.all_planets); i++){
            planettry = global.all_planets[|i]
            if planet_index == i {
                    continue
            }
            //for (j=0; j &lt; ds_list_size(planettry); j++){
            //    planetblock = ds_list_find_value(planettry, j)
            //}
            //obj_num = ds_list_size(planettry)
            ind = ds_list_find_index(planettry, blockinst)
            if ind != -1{
                if i == 0{
                planetpiece = true
                }
                planet = planettry
                finind = ind
                if subplanetpiece{
                    old_planet_index = planet_index
                }
                planet_index = i
                break
            }
        }
        
        if finind != -1{ //add to planet
            if subplanetpiece{ //add planet to planet
                plan = planet
                for(i=global.infoend; i &lt; ds_list_size(myplanet); i++){
                    subpiece_inst = myplanet[|i]
                    ds_list_add(plan, subpiece_inst.id)
                    myind = ds_list_find_index(myplanet, subpiece_inst.id)
                    //ds_list_delete(myplanet, myind)
                    ds_list_replace(plan, 0, plan[|0] + subpiece_inst.mass)
                    obj_num = ds_list_size(plan)-global.infoend
                    centerx = (plan[|1]*(obj_num-1)+subpiece_inst.x)/obj_num
                    centery = (plan[|2]*(obj_num-1)+subpiece_inst.y)/obj_num
                    ds_list_replace(plan, 1, centerx)
                    ds_list_replace(plan, 2, centery)
                    subpiece_inst.angvel = 0
                    //if not planetpiece{
                    //    subplanetpiece = true
                    //}
                    subpiece_inst.pseudo_hspd = hspd
                    subpiece_inst.pseudo_vspd = vspd
                }
                //ds_list_replace(global.all_planets, finind, plan)
                old_myplanet = myplanet
                //old_ind = planet_index
                //planet_index = finind//ds_list_find_index(global.all_planets, plan)
                for(i=global.infoend; i &lt; ds_list_size(old_myplanet); i++){
                    //old_myplanet[|i].myplanet = plan
                    if planet_index = 0{
                        old_myplanet[|i].planetpiece = true
                        old_myplanet[|i].subplanetpiece = false
                    }
                    old_myplanet[|i].planet_index = planet_index
                }
                //ds_list_delete(global.all_planets, old_planet_index)
                
                old_myplanet[|0] = 1
                old_myplanet[|1] = -10000
                old_myplanet[|2] = -10000
                old_myplanet[|3] = 0
                old_myplanet[|4] = 0
                //old_myplanet[|5] = 
                ls_size = ds_list_size(myplanet)
                for(i=global.infoend; i &lt; ls_size; i++){
                    ds_list_delete(old_myplanet, global.infoend)
                }
                ds_list_replace(global.all_planets, old_planet_index, old_myplanet)
                ds_list_replace(global.all_planets, planet_index, plan)
                if planetpiece{
                    subplanetpiece = false
                }
            }else{ // add asteroid to planet
                plan = planet
                ds_list_add(plan, id)
                ds_list_replace(plan, 0, plan[|0] + mass)
                obj_num = ds_list_size(plan)-global.infoend
                centerx = (plan[|1]*(obj_num-1)+x)/obj_num
                centery = (plan[|2]*(obj_num-1)+y)/obj_num
                ds_list_replace(plan, 1, centerx)
                ds_list_replace(plan, 2, centery)
                ds_list_replace(global.all_planets, finind, plan)
                angvel = 0
                if not planetpiece{
                    subplanetpiece = true
                }
                myplanet = plan
            }
        }else{
            if instance_exists(playinst){ //player momentum equations
                if subplanetpiece{ // planet and person
                    c_plan = global.all_planets[|planet_index]
                    c_plan_mass = c_plan[|0]
                    c_plan_x = c_plan[|1]
                    c_plan_y = c_plan[|2]
                    c_plan_vx = c_plan[|3]
                    c_plan_vy = c_plan[|4]
                    mass_const = -2*playinst.mass/(c_plan_mass+playinst.mass)
                    opp_mass_const = -2*c_plan_mass/(c_plan_mass+playinst.mass)
                    xdiff = (x - playinst.x)
                    ydiff = (y - playinst.y)
                    sqrnorm = (sqr(xdiff)+sqr(ydiff)) 
                    momentum_const = ((c_plan_vx - playinst.hspd)*xdiff + (c_plan_vy-playinst.vspd)*ydiff)
                    opp_momentum_const = ((playinst.hspd - c_plan_vx)*-xdiff + (playinst.vspd - c_plan_vy)*-ydiff)
                    c_plan_x += mass_const*momentum_const/sqrnorm*xdiff
                    c_plan_y += mass_const*momentum_const/sqrnorm*ydiff
                    playinst.hspd += opp_mass_const*opp_momentum_const/sqrnorm*-xdiff
                    playinst.vspd += opp_mass_const*opp_momentum_const/sqrnorm*-ydiff
                    playinst.nocollide = true
                    playinst.nocollide_timer = 0
                    nocollide_timer = 0
                    nocollide = true
                }else{ // asteroid and person
                    mass_const = -2*playinst.mass/(mass+playinst.mass)
                    opp_mass_const = -2*mass/(mass+playinst.mass)
                    xdiff = (x - playinst.x)
                    ydiff = (y - playinst.y)
                    sqrnorm = (sqr(xdiff)+sqr(ydiff)) 
                    momentum_const = ((hspd - playinst.hspd)*xdiff + (vspd-playinst.vspd)*ydiff)
                    opp_momentum_const = ((playinst.hspd - hspd)*-xdiff + (playinst.vspd - vspd)*-ydiff)
                    hspd += mass_const*momentum_const/sqrnorm*xdiff
                    vspd += mass_const*momentum_const/sqrnorm*ydiff
                    playinst.hspd += opp_mass_const*opp_momentum_const/sqrnorm*-xdiff
                    playinst.vspd += opp_mass_const*opp_momentum_const/sqrnorm*-ydiff
                    playinst.nocollide = true
                    playinst.nocollide_timer = 0
                    nocollide_timer = 0
                    nocollide = true
                }
            }else{
                if not subplanetpiece and not blockinst.subplanetpiece{ //asteroid to asteroid collisions
                    veldiffmag = sqrt(sqr(hspd-blockinst.hspd)+sqr(vspd-blockinst.vspd))
                    if veldiffmag &gt; global.planet_vel_requirement{ //making a new planet
                        //create new planet info
                        newplanet = ds_list_create()
                        ds_list_add(newplanet, 0, 0, 0, 0, 0)
                        
                        //add current object and blockinst to planet
                        ds_list_add(newplanet, id)
                        ds_list_replace(newplanet, 0, newplanet[|0] + mass)
                        obj_num = ds_list_size(newplanet)-global.infoend
                        centerx = (newplanet[|1]*(obj_num-1)+x)/obj_num
                        centery = (newplanet[|2]*(obj_num-1)+y)/obj_num
                        ds_list_replace(newplanet, 1, centerx)
                        ds_list_replace(newplanet, 2, centery)
                        //ds_list_replace(global.all_planets, finind, plan)
                        subplanetpiece = true
                        angvel = 0
                        pseudo_hspd = hspd
                        pseudo_vspd = vspd
                        
                        ds_list_add(newplanet, blockinst.id)
                        ds_list_replace(newplanet, 0, newplanet[|0] + blockinst.mass)
                        obj_num = ds_list_size(newplanet)-global.infoend
                        centerx = (newplanet[|1]*(obj_num-1)+blockinst.x)/obj_num
                        centery = (newplanet[|2]*(obj_num-1)+blockinst.y)/obj_num
                        ds_list_replace(newplanet, 1, centerx)
                        ds_list_replace(newplanet, 2, centery)
                        //ds_list_replace(global.all_planets, finind, plan)
                        blockinst.subplanetpiece = true
                        blockinst.angvel = 0
                        blockinst.pseudo_hspd = blockinst.hspd
                        blockinst.pseudo_vspd = blockinst.vspd
                        //blockinst.hspd = 0
                        //blockinst.vspd = 0
                        //add planet to all_planets
                        ds_list_add(global.all_planets, newplanet)
                        planet_index = ds_list_find_index(global.all_planets, newplanet)
                        blockinst.planet_index = planet_index
                        myplanet = newplanet
                        blockinst.myplanet = newplanet
                        //add subplanet_piece boolean to this and blockinst
                    }else{ //momentum collision
                        mass_const = -2*blockinst.mass/(mass+blockinst.mass)
                        opp_mass_const = -2*mass/(mass+blockinst.mass)
                        xdiff = (x - blockinst.x)
                        ydiff = (y - blockinst.y)
                        sqrnorm = (sqr(xdiff)+sqr(ydiff)) 
                        momentum_const = ((hspd - blockinst.hspd)*xdiff + (vspd-blockinst.vspd)*ydiff)
                        opp_momentum_const = ((blockinst.hspd - hspd)*-xdiff + (blockinst.vspd - vspd)*-ydiff)
                        hspd += mass_const*momentum_const/sqrnorm*xdiff
                        vspd += mass_const*momentum_const/sqrnorm*ydiff
                        blockinst.hspd += opp_mass_const*opp_momentum_const/sqrnorm*-xdiff
                        blockinst.vspd += opp_mass_const*opp_momentum_const/sqrnorm*-ydiff
                        blockinst.nocollide = true
                        blockinst.nocollide_timer = 0
                        nocollide = true
                        nocollde_timer = 0
                    }
                }
            }
        }
    }
}
if subplanetpiece{
    //planet_index = ds_list_find_index(global.all_planets, myplanet)
    myplanet = global.all_planets[|planet_index]
    pseudo_hspd = hspd
    pseudo_vspd = vspd
    hspd = myplanet[|3]//each step set to zero to determine new vel
    vspd = myplanet[|4]
}
if planetpiece{
    pseudo_hspd = 0
    pseudo_vspd = 0
}
if not planetpiece and not subplanetpiece{
x+=hspd
y+=vspd
}
nocollide_timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
